/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.alphacab.model;

import testing.MyShit;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Paul, Trym
 */
public class UserDao {

    //initialise objects
    Connection con = null; //connection to databse
    Statement sm = null; //for executing sql statements on the database
    ResultSet rs = null; //containing the result set returned from the sql query

    //constructor
    public UserDao() {
    }
    
    
    //db connection function
    public void connect(Connection con) {
        this.con = con;
    }
    
    //SQL - update functions
    private boolean query(String query){
        try{
            sm = con.createStatement();
            rs = sm.executeQuery(query);
            return true;
        }
        catch(SQLException e){
            System.out.println("SQLException: " + e);
        }
        return false; 
    } 
    
    private boolean update(String query){
        try{
            sm = con.createStatement();
            sm.executeUpdate(query, Statement.RETURN_GENERATED_KEYS);
            return true;
        }
        catch(SQLException e){
            System.out.println("SQLException: " + e);
        }
        return false;
    }
    private int updateAndGetAutoGeneratedKey(String query){
        try{
            //execute statement
            sm = con.createStatement();
            sm.executeUpdate(query, Statement.RETURN_GENERATED_KEYS);
            
            //get autoGenerated key
            rs = sm.getGeneratedKeys();
            while(rs.next())
                return rs.getInt(1);
        }
        catch(SQLException e){
            System.out.println("SQLException: " + e);
        }
        return 0;
    }
    
    public boolean saveUser(Admin admin){
        
        //get user params
        String user = admin.getUsername();
        String pass = admin.getPassword();
        String role = admin.getRole();
        
        //save admin to user table
        return update( "INSERT INTO USERS (USERNAME, PASSWORD, ROLE) VALUES ('" +user+ "', '" +pass+ "', '" +role+ "')" );
    }
    public boolean saveUser(Driver driver){
        
        //get user params
        String user = driver.getUsername();
        String pass = driver.getPassword();
        String role = driver.getRole();
        
        String name = driver.getName();
        String reg = driver.getRegistration();
        
        //save driver to users table and get auto generated key
        int userID = updateAndGetAutoGeneratedKey( "INSERT INTO USERS (USERNAME, PASSWORD, ROLE) VALUES ('" +user+ "', '" +pass+ "', '" +role+ "')" );
        if(userID != 0){
            
            //save driver details to drivers table
            boolean driverDetailsAdded = update( "INSERT INTO DRIVERS (REGISTRATION, NAME, USERID) VALUES ('" +reg+ "', '" +name+ "', " +userID+")" );
            if(driverDetailsAdded == true)
                return true;
            else{
                //if fail to add driver details to driver table - remove driver from user table
                update( "DELETE FROM USERS WHERE username='" +user+ "' AND password='" +pass+ "'" );
            }
        }
        return false;
    }
    public boolean saveUser(Customer customer){
        
        //get user params
        String user = customer.getUsername();
        String pass = customer.getPassword();
        String role = customer.getRole();
        
        String name = customer.getName();
        String addr = customer.getAddress();
        
        //save customer to users table and get auto generated key
        int userID = updateAndGetAutoGeneratedKey( "INSERT INTO USERS (USERNAME, PASSWORD, ROLE) VALUES ('" +user+ "', '" +pass+ "', '" +role+ "')"  );
        if(userID != 0){
            
            //save customer details to customer table
            boolean customerDetailsAdded = update( "INSERT INTO CUSTOMER (NAME, ADDRESS, USERID) VALUES ('" +name+ "', '" +addr+ "', " +userID+")" );
            if (customerDetailsAdded == true)
                return true;
            else
                update( "DELETE FROM USERS WHERE username='" +user+ "' AND password='" +pass+ "'" );
        }
        return false;   
    }
    
    public boolean removeUser(int userID){
        String role = "";
        //get role from user table
        try{
            query( "SELECT * FROM USERS WHERE ID=" +userID );
            while (rs.next())
                role = rs.getString(4).toLowerCase();
            
            System.out.print("a------------------------------------");
            
            //remove from drivers/customer table
            switch(role){
                case("driver"):
                        update( "DELETE FROM DRIVERS WHERE userID=" +userID );
                    break;
                case("customer"):
                        update( "DELETE FROM CUSTOMER WHERE userID=" +userID );
                    break;
                default:
                    break;
            }
            
            System.out.print("b------------------------------------");

            //remove from user table
            update( "DELETE FROM USERS WHERE ID=" +userID );
        }
        catch(SQLException e){
            System.out.println("SQLException: " + e);
        }
        
        System.out.print("c------------------------------------");
        
        return true;
    }
    
    public User getUser(String username, String password){
        User u = null;
        try{
            //get user
            boolean querySuccessful = query( "SELECT * FROM USERS WHERE USERNAME='" + username + "' AND PASSWORD='" + password + "'" );
            if (querySuccessful == true){
                while(rs.next()){
                    
                    //get general attributes
                    int userID = rs.getInt(1);
                    String user = rs.getString(2);
                    String pass = rs.getString(3);
                    
                    //get user type
                    String userType = rs.getString(4).toLowerCase();
                    
                    switch(userType){
                        case "admin":
                            
                            System.out.println("loginType: admin");
                            
                            //set user
                            u = new Admin(userID, user, pass);
                            break;
                        case "driver":
                            
                            //get driver specific attributes
                            boolean gotDriver = query("SELECT * FROM DRIVERS WHERE USERID=" +userID+ "");
                            if (gotDriver == true){
                                while(rs.next()){
                                    String reg = rs.getString(2);
                                    String name = rs.getString(3);
                                    
                                    //set user
                                    u = new Driver(userID, user, pass, reg, name);
                                }
                            }
                            break;
                        case "customer":
                            //get customer specific attributes
                            boolean gotCustomer = query("SELECT * FROM CUSTOMER WHERE USERID=" +userID+ "");
                            if (gotCustomer == true){
                                while (rs.next()){
                                    String name = rs.getString(2);
                                    String addr = rs.getString(3);
                                    
                                    //set user
                                    u = new Customer(userID, user, pass, name, addr);
                                }
                            }
                            break;
                        default:
                            System.out.println("glitch in the matrix...");
                    }
                }
            }
        }
        catch(SQLException e){
            System.out.println("Failed to get user");
        }
        return u;
    } 
    
    public List<User> getAllUsers(){
        //NEED TO DOUBLE CHECK THAT THE DATA USED IN INSTANTIATION IS CORRECT
        List<User> userList = new ArrayList();
        
        try{
            //get results
            Statement statement = this.con.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM USERS");

            //iterate over results
            while(resultSet.next()){
                User u;

                switch(resultSet.getString(4).toLowerCase()){
                    case("driver"):
                        u = new Driver(resultSet.getInt(1), resultSet.getString(2), resultSet.getString(3));
                        break;
                    case("customer"):
                        u = new Customer(resultSet.getInt(1), resultSet.getString(2), resultSet.getString(3));
                        break;
                    case("admin"):
                        u = new Admin(resultSet.getInt(1), resultSet.getString(2), resultSet.getString(3));
                        break;
                    default:
                        u = null;
                        System.out.println("Glitch in the matrix. You aren't supposed to be here...");
                        break;
                }
                userList.add(u);
            }
        }
        catch(SQLException e) {
            System.out.println("SQLException: " + e);
        }
        
        return userList;
    }
    
    public List<Customer> getAllCustomers(){
        List<Customer> customerList = new ArrayList();
                
        try{
            //get results
            query( "SELECT * FROM USERS WHERE role='customer'" );
                       
            //iterate over results
            while(rs.next()){
                
                PreparedStatement ps = con.prepareStatement("SELECT * FROM CUSTOMER WHERE USERID = ?");
                
                ps.setInt(1, rs.getInt(1));
                
                ResultSet rSet = ps.executeQuery();
                
                // some customers are only present in the users table 
                // but not in the customers table this can cause SQL exceptions
                // so use this to skip them.
                if(!rSet.next()){
                    System.out.println("Customer not fount in customer list!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
                    continue;
                }
                                
                Customer c = new Customer(rs.getInt(1), rs.getString(2), rs.getString(3), rSet.getString(2), rSet.getString(3));
                customerList.add(c);
            }
        }
        catch(SQLException e){
            System.out.println("Failed to get customer list - SQLException:" + e);
        }
        
        return customerList;
    }
    
    public List<Driver> getAllDrivers(){
        List<Driver> driverList = new ArrayList();
                
        try{
            //get results
            query( "SELECT * FROM USERS WHERE role='driver'" );
                       
            //iterate over results
            while(rs.next()){
                
                PreparedStatement ps = con.prepareStatement("SELECT * FROM DRIVERS WHERE USERID = ?");
                
                ps.setInt(1, rs.getInt(1));
                
                ResultSet rSet = ps.executeQuery();
                
                // some drivers are only present in the users table 
                // but not in the drivers table this can cause SQL exceptions
                // so use this to skip them.
                if(!rSet.next()){
                    System.out.println("Driver not fount in driver list!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
                    continue;
                }
                                
                Driver u = new Driver(rs.getInt(1), rs.getString(2), rs.getString(3), rSet.getString(3), rSet.getString(2));
                driverList.add(u);
            }
        }
        catch(SQLException e){
            System.out.println("Failed to get driver list - SQLException:" + e);
        }
        
        return driverList;
    }
    
    public boolean addDemand(String name, String startAddress, String endAddress, 
            String pickupDate, String pickupTime, int customerID) {
        
        String sqlStatement = "INSERT INTO DEMANDS (name, address, destination, date, time, status, customerid) VALUES (?, ?, ?, ?, ?, ?, ?)";
        
        try{
            
            PreparedStatement newDemand = con.prepareStatement(sqlStatement);
            
            newDemand.setString(1, name);
            newDemand.setString(2, startAddress);
            newDemand.setString(3, endAddress);
            newDemand.setString(4, pickupDate);
            newDemand.setString(5, pickupTime);
            newDemand.setString(6, "Outstanding");
            newDemand.setInt(7, customerID);
            
            int udatedRows = newDemand.executeUpdate();
            
            if (udatedRows > 0) {
                return true;
            }
            
        } catch (SQLException e) {
            System.out.println("Failed to add new demand - SQLException:" + e);
        }
        
        return false;
    }
    
    public List<Demand> getDemandsForCustomer(Customer customer) {
        
        List<Demand> demands = new ArrayList<>();
        
        String s = "SELECT * FROM DEMANDS WHERE CUSTOMERID = ?";
        
        Demand tempDemand;
        
        try {
            
            PreparedStatement ps = con.prepareStatement(s);
            ps.setInt(1, customer.getId());
            
            ResultSet rSet = ps.executeQuery();
            
            while (rSet.next()) {
                tempDemand = new Demand(rSet.getInt(1), rSet.getString(2), rSet.getString(3), rSet.getString(4), rSet.getString(5), rSet.getString(6), rSet.getString(7), rSet.getInt(8));
                
                demands.add(tempDemand);
                
            }
            
        } catch (SQLException e) {
            System.out.println("Failed to get demands for customer - SQLException:" + e);
        }
        
        return demands;
        
    }
}
    